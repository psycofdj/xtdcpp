#!/bin/bash
set -e

# debug
env | grep TRAVIS

DEST_DIR="pr/${TRAVIS_PULL_REQUEST}";
if [ "${TRAVIS_PULL_REQUEST}" = "false" ]; then
    DEST_DIR="${TRAVIS_BRANCH}";
fi

TARGET_BRANCH="gh-pages"
COMMIT_AUTHOR_EMAIL=$(git log -n1 --pretty="%ae")

# Save some useful information
REPO=`git config remote.origin.url`
SSH_REPO=${REPO/https:\/\/github.com\//git@github.com:}
SHA=`git rev-parse --verify HEAD`

# Clone the existing gh-pages for this repo into out/
# Create a new empty branch if gh-pages doesn't exist yet (should only happen on first deply)
echo "Cloning gh-pages branch from ${REPO}..."
git clone -q -b ${TARGET_BRANCH} $REPO out

echo "Copying generated documentation..."
mkdir -p out/${DEST_DIR}/
rm -rf out/${DEST_DIR}/*
cp -r ./reports/* out/${DEST_DIR}/
find out/${DEST_DIR}/ -name latex -type d | xargs rm -rf
find out/${DEST_DIR}/ -name xml   -type d | xargs rm -rf


cd out
git config user.name "Travis CI"
git config user.email "${COMMIT_AUTHOR_EMAIL}"

# # If there are no changes to the compiled out (e.g. this is a README update) then just bail.
# if [ -z `git diff --exit-code` ]; then
#     echo "No changes to the output on this push; exiting."
#     exit 0
# fi

# Commit the "changes", i.e. the new version.
# The delta will show diffs between new and old versions.
echo "Adding files to git..."
git add ${DEST_DIR}/*
git commit -m "Deploy to GitHub Pages: ${SHA}"




# Get the deploy key by using Travis's stored variables to decrypt deploy_key.enc
echo "Decoding deploy key..."
ENCRYPTED_KEY_VAR="encrypted_${ENCRYPTION_LABEL}_key"
ENCRYPTED_IV_VAR="encrypted_${ENCRYPTION_LABEL}_iv"
ENCRYPTED_KEY=${!ENCRYPTED_KEY_VAR}
ENCRYPTED_IV=${!ENCRYPTED_IV_VAR}
openssl aes-256-cbc -K $ENCRYPTED_KEY -iv $ENCRYPTED_IV -in ${TRAVIS_BUILD_DIR}/travis-ci/deploy_key.enc -out deploy_key -d
chmod 600 deploy_key
eval `ssh-agent -s`
ssh-add deploy_key

# Now that we're all set up, we can push.
echo "Pushing gh-pages branch..."
git branch ${TARGET_BRANCH}-clean $(echo "Deploy to GitHub Pages: ${SHA}" | git commit-tree HEAD^{tree})
git checkout ${TARGET_BRANCH}-clean
git push -f -q $SSH_REPO ${TARGET_BRANCH}-clean:${TARGET_BRANCH}
rm -f deploy_key
